#include <curses.h>
#include <stdio.h>
#include <random>
#include <cmath>
#include <string>

struct Pos {
	int y;
	int x;
};

#define MAX_WIND_HEIGHT 100

class Cwin {
private:
	struct Pos pos;
	struct Pos size;
	void AdjustHeight(int h);
	void AdjustWidth(int w);
	
public:
	Cwin();
	Cwin(int h, int w, int y, int x);
	~Cwin();
	void Print();
	void Moveto(int y, int x);
	void Shiftx(int x=0);
	void Shifty(int y=0);
	void AdjustSize(int h, int x);
	int Gety();
	int Getx();
};

extern const int NUM_TALENTS_IN_STAT[NUM_TALENTS];
extern const std::string STAT_NAMES[NUM_STATS];

int rand_num(int min, int max);
char GetUserInp(int argn, ...);
void PrintLevelupPrompt(int y, int x);

enum AppState { STATE_STATS, STATE_TALENTS, STATE_RESET, STATE_EXIT };
enum StatState { STATE_STR, STATE_DEX, STATE_CON, STATE_INT, STATE_WIS, STATE_CHA, STATE_LCK };

class Talent {
private:
	int stat;
	std::string name;
	std::string desc;
	Talent* next;
public:
	Talent();
	Talent(int s, std::string n, std::string d);
	~Talent();
	Talent* GetNext();
	void SetNext(Talent* new_next);
};

class SubTalentTree {
private:
	int stat;
	Talent* head;
public:
	SubTalentTree();
	SubTalentTree(int s);
	~SubTalentTree();
	void AddTalent(std::string name, std::string desc);
	void PrintTalents();
};

class TalentTree {
private:
	SubTalentTree* stt[NUM_STATS];
public:
	TalentTree();
	~TalentTree();
	void PrintWin();
	void AddTalent(int stat, std::string name, std::string desc);
	//void PrintTalentList(int stat);
};

PlayerCharacter::PlayerCharacter()
: level(0) {
	pos = {1, 1};
	for( int i=0; i<NUM_STATS; i++ ){
		stats[i] = 0;
		talent_points[i] = 0;
	}
}

PlayerCharacter::~PlayerCharacter(){
}

void PlayerCharacter::Levelup(){
	GenerateTalentPoints();
	level += 1;
}

void PlayerCharacter::GenerateTalentPoints(){
	for( int i=0; i<NUM_STATS; i++ ){
		int dice_thrown = 0;
		if( stats[i] > 18 ){
			dice_thrown = 6;
		} else if( stats[i] > 16 ){
			dice_thrown = 5;
		} else if( stats[i] > 14 ){
			dice_thrown = 4;
		} else if( stats[i] > 12 ){
			dice_thrown = 3;
		} else if( stats[i] > 10 ){
			dice_thrown = 2;
		} else if( stats[i] > 7 ){
			dice_thrown = 1;
		}

		for( int j=0; j<dice_thrown; j++ ){
			talent_points[i] += rand_num(1, 4);
		}
	}
}

void PlayerCharacter::IncreaseStat(int stat){
	stats[stat] += 1;
}

void PlayerCharacter::SetPos(struct Pos new_pos){
	pos = new_pos;
}

void PlayerCharacter::PrintCurrentLevel(){
	mvprintw(pos.y, pos.x + 4, "LEVEL: %i", level);
}

Cwin::Cwin() {
	pos = { 0 };
	size = { 5, 5 };
}

Cwin::Cwin(int h, int w, int y, int x) {
	pos = { y, x };
	size = { h, w };
}

Cwin::~Cwin(){}


void Cwin::AdjustHeight(int h) {
	if( h < 2 ){
		size.y = 2;
		return;
	}
	size.y = h;
}

void Cwin::AdjustWidth(int w) {
	if( w < 3 ){
		size.x = 3;
		return;
	} else {
		if( size.x % 2 == 0 ){
			size.x = w + 1;
			return;
		}
	}
	size.x = w;
}

void Cwin::Print() {
	for( int i=0; i<size.y; i++ ){
		for( int j=0; j<size.x; j++ ){
			if( (j == 0) || (j == size.x - 1) )
				mvaddch(pos.y + i, pos.x + j, '|');
			else if( (i == 0) || (i == size.y - 1) )
				mvaddch(pos.y + i, pos.x + j, '_');
			else
				mvaddch(pos.y + i, pos.x + j, ' ');
		}
	}
	mvaddch(pos.y, pos.x, ' ');
	mvaddch(pos.y, size.x, ' ');
}

void Cwin::Moveto(int y, int x) {
	pos = {y, x};
}

void Cwin::Shiftx(int x) {
	pos.x += x;
}

void Cwin::Shifty(int y) {
	pos.y += y;
}

void Cwin::AdjustSize(int h, int w) {
	AdjustWidth(w);
	AdjustHeight(h);
}

int Cwin::Gety() {
	return pos.y;
}

int Cwin::Getx() {
	return pos.x;
}

const int NUM_TALENTS_IN_STAT[] = {NUM_STR_TALENTS, NUM_DEX_TALENTS, NUM_CON_TALENTS, NUM_INT_TALENTS, NUM_WIS_TALENTS, NUM_CHA_TALENTS};

const std::string STAT_NAMES[] = {
	"STR",
	"DEX",
	"CON",
	"INT",
	"WIS",
	"CHA",
	"LCK"
};

std::random_device rd;
std::mt19937 RNGine(rd());
int rand_num(int min, int max){
	std::uniform_int_distribution<int> rand(min, max);
	return rand(RNGine);
}

char GetUserInp(int argn, ...){
	char user_inp;
	while(true) {
		user_inp = getch();
		va_list args;
		va_start(args, argn);
		for( int i=0; i<argn; i++ ){
			if( user_inp == va_arg(args, int) ){
				clear();
				va_end(args);
				return user_inp;
			}
		}
		mvprintw(rand_num(1, 40), rand_num(1, 80), "bad input, try again");
	}
}

Talent::Talent()
: stat(0), name("N/A"), desc("N/A") {}

Talent::Talent(int s, std::string n, std::string d)
: stat(s), name(n), desc(d) {}

Talent::~Talent(){}

Talent* Talent::GetNext(){
	return next;
}

void Talent::SetNext(Talent* new_next){
	next = new_next;
}

SubTalentTree::SubTalentTree()
: stat(0){
	head = new Talent;
}

SubTalentTree::SubTalentTree(int s)
: stat(s){}

SubTalentTree::~SubTalentTree() {}

void SubTalentTree::AddTalent(std::string name, std::string desc) {
	Talent* temp = head;
	if( head == nullptr ){
		head = new Talent(stat, name, desc);
		return;
	}

	while( temp->GetNext() != nullptr ){
		temp = temp->GetNext();
	}
	temp->SetNext(new Talent(stat, name, desc));
}

void SubTalentTree::PrintTalents(){
	
}

TalentTree::TalentTree() {
	for( int i=0; i<NUM_STATS; i++ ){
		stt[i] = new SubTalentTree(0);
	}
}

TalentTree::~TalentTree() {
	for( int i=0; i<NUM_STATS; i++ ){
		//delete stt[i];
	}
}

void TalentTree::AddTalent(int stat, std::string name, std::string desc){
	stt[stat]->AddTalent(name, desc);
}

PlayerCharacter::PlayerCharacter()
: level(0) {
	pos = {1, 1};
	for( int i=0; i<NUM_STATS; i++ ){
		stats[i] = 0;
		talent_points[i] = 0;
	}
}

PlayerCharacter::~PlayerCharacter(){
}

void PlayerCharacter::Levelup(){
	GenerateTalentPoints();
	level += 1;
}

void PlayerCharacter::GenerateTalentPoints(){
	for( int i=0; i<NUM_STATS; i++ ){
		int dice_thrown = 0;
		if( stats[i] > 18 ){
			dice_thrown = 6;
		} else if( stats[i] > 16 ){
			dice_thrown = 5;
		} else if( stats[i] > 14 ){
			dice_thrown = 4;
		} else if( stats[i] > 12 ){
			dice_thrown = 3;
		} else if( stats[i] > 10 ){
			dice_thrown = 2;
		} else if( stats[i] > 7 ){
			dice_thrown = 1;
		}

		for( int j=0; j<dice_thrown; j++ ){
			talent_points[i] += rand_num(1, 4);
		}
	}
}

void PlayerCharacter::IncreaseStat(int stat){
	stats[stat] += 1;
}

void PlayerCharacter::SetPos(struct Pos new_pos){
	pos = new_pos;
}

void PlayerCharacter::PrintCurrentLevel(){
	mvprintw(pos.y, pos.x + 4, "LEVEL: %i", level);
}

void StateMachine(TalentTree tt, Cwin& cwin, PlayerCharacter& player, AppState& curstate, int& statselected, char& userInp);
void InitTalents(TalentTree& tt);

void initialize(){
	initscr(); cbreak(); noecho();
	keypad(stdscr, TRUE);
}

int deinitialize(){
	endwin();
	return 0;
}

int main(){
	initialize();
	enum AppState curstate = STATE_STATS;
	int statselected = 0;
	char userInp = '\0';
	TalentTree tt;
	Cwin cwin(40, 81, 1, 1);

	while( curstate != STATE_EXIT ){
		clear();
		struct Pos player_origin = { 4, 4 };
		PlayerCharacter player; 
		player.SetPos(player_origin);
		curstate = STATE_STATS;
		
		while( true ){
			StateMachine(tt, cwin, player, curstate, statselected, userInp);
			if( (curstate == STATE_RESET) || (curstate == STATE_EXIT) )
				break;
		}
		if( curstate == STATE_EXIT )
			break;
	}
	return deinitialize();
}

void StateMachine(TalentTree tt, Cwin& cwin, PlayerCharacter& player, AppState& curstate, int& statselected, char& userInp){
	switch( curstate ){
	case STATE_STATS:
		cwin.Print();
		//player.IncreaseStat(int(userInp) - int('0') - 1);
		player.PrintCurrentLevel();
		PrintLevelupPrompt(20, 3);
		userInp = GetUserInp(10, '1', '2', '3', '4', '5', '6', 'q', 'L', 'R', 't');
		if( userInp == 'q' )
			curstate = STATE_EXIT;
		else if( userInp == 'R' )
			curstate = STATE_RESET;
		else if( userInp == 'L' )
			player.Levelup();
		else if( userInp == 't' ){
			clear();
			refresh();
			curstate = STATE_TALENTS;
		}
		break;

	case STATE_TALENTS:
		player.PrintCurrentLevel();
		userInp = GetUserInp(3, 'h', 'l', 'b');
		if( userInp == 'b' )
			curstate = STATE_STATS;
		else if( userInp == 'h' ){
			if( statselected == 0 )
				statselected = NUM_STATS - 1;
			else
				statselected--;
		} else if( userInp == 'l' ){
			if( statselected == NUM_STATS - 1 )
				statselected = 0;
			else
				statselected++;
		}
		break;

	default:
		break;
	}
}

void PrintLevelupPrompt(int y, int x){
	int xx = x;
	mvprintw(y, x, "Select a stat that you would like to upgrade [1-6]");
	for( int i=0; i<NUM_STATS; i++ ){
		mvprintw(y+1, xx, "%i = %s", i + 1, STAT_NAMES[i].c_str());
		xx += 9;
	}
	mvprintw(y + 3, x, "press 'r' to reset and 'q' to quit");
}

void InitTalents(TalentTree& tt){
	tt.AddTalent(0, "Puglism", "Unarmed damage.");
	tt.AddTalent(0, "Headhunter", "Throwing damage.");
	tt.AddTalent(0, "Warrior", "Weapon damage.");
	tt.AddTalent(0, "Mule", "Carry weight.");
	tt.AddTalent(0, "Way of the Frog", "Jumping increase.");
	tt.AddTalent(0, "Way of the Ram", "Knockback increase.");
	tt.AddTalent(0, "Nutcracker", "Grip strength.");
	tt.AddTalent(1, "Mist", "Chance to dodge.");
	tt.AddTalent(1, "Exploiter", "Chance for subcrit.");
	tt.AddTalent(1, "Accuracy M.", "Chance to Hit (Melee weapons).");
	tt.AddTalent(1, "Accuracy R.", "Chance to Hit (Ranged weapons).");
	tt.AddTalent(1, "Accuracy T.", "Chance to Hit (Thrown weapons).");
	tt.AddTalent(1, "Speedster", "Movement speed increase.");
	tt.AddTalent(1, "Sealegs", "Chance to maintain balance.");
	tt.AddTalent(1, "Featherfall", "Reduced fall damage.");
	tt.AddTalent(1, "Ballistics", "Increase projectile range.");
	tt.AddTalent(1, "Avoidance", "Increased saving throw on AoE effects.");
	tt.AddTalent(2, "Hearty", "Health increase.");
	tt.AddTalent(2, "Healthy", "Resistance increase (Bleeding, Poison, Disease).");
	tt.AddTalent(2, "Aegis", "Chance to deflect damage type.");
	tt.AddTalent(2, "Mouth Breather", "Reduced DoT from neck Constriction.");
	tt.AddTalent(2, "Drunkard", "Drinking tolerance.");
	tt.AddTalent(2, "Poise", "Resistance to knockback.");
	tt.AddTalent(2, "Castle", "Make yourself cover for allies.");
	tt.AddTalent(3, "Empty Mind", "Buff duration increase.");
	tt.AddTalent(3, "Magician", "All spell damage increase.");
	tt.AddTalent(3, "Accuracy S.", "Chance to Hit (Spells).");
	tt.AddTalent(3, "Firebender", "Fire and Lightning damage increase.");
	tt.AddTalent(3, "Ice Maiden", "Ice damage increase.");
	tt.AddTalent(3, "Necromancer", "Necrotic damage increase.");
	tt.AddTalent(3, "The Faithful", "Radiant damage increase.");
	tt.AddTalent(3, "Melting Man", "Acid damage increase.");
	tt.AddTalent(4, "Strong Mind", "Increase DC spell break saves.");
	tt.AddTalent(4, "Watch Your Step!", "Chance to spot traps passively.");
	tt.AddTalent(4, "Show Yourself!", "Chance to spot hidden movements passively.");
	tt.AddTalent(4, "The Doctor", "Increase spell healing.");
	tt.AddTalent(4, "Druidic", "Increased offensive nature damage.");
	tt.AddTalent(4, "Magic Mirror", "Chance to deflect small magic projectiles.");
	tt.AddTalent(4, "Writer's Block", "Chance to gain insight while crafting.");
	tt.AddTalent(5, "Knock Knock,", "Chance to be funny.");
	tt.AddTalent(5, "Who's There?", "Chance to persuade door.");
	tt.AddTalent(5, "Charge!", "Chance for nearby allies to roll +1 initiative.");
	tt.AddTalent(5, "Attack!", "Chance for nearby allies to increase primary damage stat +1.");
	tt.AddTalent(5, "Hold the Line!", "Chance for nearby allies to increase AC +1.");
	tt.AddTalent(5, "Presence", "Increased threat.");
	tt.AddTalent(5, "Distract", "Chance to decrease threat for one turn.");
	tt.AddTalent(5, "Bully", "psychic damage increase.");
	tt.AddTalent(6, "Luck", "Lucky.");
}
